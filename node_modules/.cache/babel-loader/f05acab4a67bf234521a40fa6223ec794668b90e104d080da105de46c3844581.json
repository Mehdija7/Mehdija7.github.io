{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elmin\\\\Desktop\\\\portofolio\\\\src\\\\AnimatedSVG\\\\AnimatedSVG.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport \"./AnimatedSVG.css\"; // Make sure to replace with your actual CSS file\nimport IconSquare from \"../Icons/IconSquare\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimatedSVG = () => {\n  _s();\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add(\"show\");\n        } else {\n          entry.target.classList.remove(\"show\");\n        }\n      });\n    });\n    document.querySelectorAll(\".hidden\").forEach(element => observer.observe(element));\n\n    // Clean up the observer when the component unmounts\n    return () => observer.disconnect();\n  }, []); // Empty dependency array to run the effect only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(IconSquare, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(AnimatedSVG, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = AnimatedSVG;\nexport default AnimatedSVG;\nvar _c;\n$RefreshReg$(_c, \"AnimatedSVG\");","map":{"version":3,"names":["React","useEffect","IconSquare","jsxDEV","_jsxDEV","AnimatedSVG","_s","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","remove","document","querySelectorAll","element","observe","disconnect","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/elmin/Desktop/portofolio/src/AnimatedSVG/AnimatedSVG.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./AnimatedSVG.css\"; // Make sure to replace with your actual CSS file\r\nimport IconSquare from \"../Icons/IconSquare\";\r\n\r\nconst AnimatedSVG = () => {\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver((entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          entry.target.classList.add(\"show\");\r\n        } else {\r\n          entry.target.classList.remove(\"show\");\r\n        }\r\n      });\r\n    });\r\n\r\n    document\r\n      .querySelectorAll(\".hidden\")\r\n      .forEach((element) => observer.observe(element));\r\n\r\n    // Clean up the observer when the component unmounts\r\n    return () => observer.disconnect();\r\n  }, []); // Empty dependency array to run the effect only once on mount\r\n\r\n  return (\r\n    <div>\r\n      <IconSquare />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnimatedSVG;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,mBAAmB,CAAC,CAAC;AAC5B,OAAOC,UAAU,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxBL,SAAS,CAAC,MAAM;IACd,MAAMM,QAAQ,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAK;MACrDA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;QACzB,IAAIA,KAAK,CAACC,cAAc,EAAE;UACxBD,KAAK,CAACE,MAAM,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;QACpC,CAAC,MAAM;UACLJ,KAAK,CAACE,MAAM,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;QACvC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFC,QAAQ,CACLC,gBAAgB,CAAC,SAAS,CAAC,CAC3BR,OAAO,CAAES,OAAO,IAAKZ,QAAQ,CAACa,OAAO,CAACD,OAAO,CAAC,CAAC;;IAElD;IACA,OAAO,MAAMZ,QAAQ,CAACc,UAAU,CAAC,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEjB,OAAA;IAAAkB,QAAA,eACElB,OAAA,CAACF,UAAU;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV,CAAC;AAACpB,EAAA,CAzBID,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AA2BjB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}